#!/usr/bin/env node

const HELP = `

Usage: parser-tests

Create

Options:
-h, --help     display this help and exit

`.trim();

const warning_comment_lines = `

-- ESLINT GLOBAL VARIABLES
--
-- Do not edit below this line as it is generated by tests/generate-globals.py
--

`
	.trim()
	.split('\n');

// import_re = (r"import\s+((?:[.\w]+\.)?(\w+))\s+(?:as (\w+)\s+)?"
//              r"exposing\s+\((\w+(?:,\s+\w+)*)\)")

// def processFile(file):
//     globals = []

//     module_name = Path(file).stem

//     last_line_empty = False

//     with fileinput.input(file, inplace=True) as f:
//         for line in f:
//             if line.startswith(warning_comment_lines[0]):
//                 break
//             else:
//                 print(line, end='')
//                 last_line_empty = line.strip() == ''
//                 importMatch = re.search(import_re, line)

//                 if importMatch is not None:
//                     # Use alias if it is there, otherwise use last part of
//                     # import.
//                     moduleAlias = importMatch[3]
//                     if moduleAlias is None:
//                         moduleAlias = importMatch[2]

//                     vars = map(
//                         lambda defName: "__{}_{}".format(
//                             moduleAlias, defName.strip()),
//                         importMatch[4].split(","),
//                     )

//                     globals.append("/* global {} */".format(", ".join(vars)))

//     unused_var_config = '{{ "varsIgnorePattern": "_{}_.*" }}'.format(
//         module_name)

//     with open(file, "a") as f:
//         if not last_line_empty:
//             print(file=f)

//         print("\n".join(warning_comment_lines), file=f)
//         print(file=f)
//         print('/* eslint no-unused-vars: ["error", {}] */'.format(
//             unused_var_config),
//               file=f)
//         print(file=f)
//         print("\n".join(globals), file=f)

// def main():
//     if len(sys.argv) < 2:
//         print("generate-globals.py: error! At least one path or glob required",
//               file=sys.stderr)
//         exit(1)

//     if "-h" in sys.argv or "--help" in sys.argv:
//         print(HELP)
//         exit(0)

//     for provided_glob in sys.argv[1:]:
//         for path in glob.glob(provided_glob, recursive=True):
//             processFile(path)

// main()
